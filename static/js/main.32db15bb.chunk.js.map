{"version":3,"sources":["api/api.ts","api/posts.ts","components/PostsList/PostsList.tsx","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getAllUsers","a","fetch","request","json","getUserPosts","userId","response","res","Response","Error","PostsList","getUserId","selectedPostId","setSelectedPostId","setPost","useState","posts","setPosts","getPosts","postsFromS","console","log","useEffect","className","map","post","title","id","type","onClick","getPostComments","postId","then","ok","createPostComments","comment","method","body","JSON","stringify","headers","deletePostComments","NewCommentForm","getComments","commentName","setCommentName","commentEmail","setCommentEmail","commentBody","setCommentBody","createComments","onSubmit","event","preventDefault","newComment","name","email","placeholder","value","onChange","target","required","PostDetails","comments","setComments","hideComments","setHideComments","deleteComment","commentsFromS","updateComments","length","App","setGetUserId","users","setUsers","allUsers","usersFromServer","slice","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.32db15bb.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getAllUsers = async () => {\n  const request = await fetch(`${BASE_URL}/users`);\n\n  return request.json();\n};\n","import { BASE_URL } from './api';\n\nexport async function getUserPosts(userId: number): Promise<Post[]> {\n  const response = await fetch(`${BASE_URL}/posts${userId === 0 ? '' : `?userId=${userId}`}`);\n  const res = await response.json();\n\n  if (res.Response === 'False') {\n    throw new Error('Something went wrong.');\n  } else {\n    return res;\n  }\n}\n","import React, { useEffect, useState } from 'react';\nimport { getUserPosts } from '../../api/posts';\nimport './PostsList.scss';\n\ninterface Props {\n  getUserId: number;\n  selectedPostId: number;\n  setSelectedPostId: (arg: number) => void;\n  setPost: (arg: Post | null) => void;\n}\n\nexport const PostsList: React.FC<Props>\n  = ({\n    getUserId,\n    selectedPostId,\n    setSelectedPostId,\n    setPost,\n  }) => {\n    const [posts, setPosts] = useState<Post[]>([]);\n\n    const getPosts = async (userId: number) => {\n      try {\n        const postsFromS = await getUserPosts(userId);\n\n        setPosts(postsFromS);\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.log(error, 'Request failed');\n      }\n    };\n\n    useEffect(() => {\n      getPosts(getUserId);\n    }, [getUserId]);\n\n    return (\n      <div className=\"PostsList\">\n        <h2>Posts:</h2>\n\n        <ul\n          className=\"PostsList__list\"\n          data-cy=\"postDetails\"\n        >\n          {posts && (posts.map(post => (\n            <li\n              className=\"PostsList__item\"\n              key={post.id}\n            >\n              <div>\n                <b>{`[User #${post.userId}]: `}</b>\n                {post.title}\n              </div>\n\n              {selectedPostId === post.id\n                ? (\n                  <button\n                    type=\"button\"\n                    className=\"PostsList__button button is-danger\"\n                    onClick={() => {\n                      setSelectedPostId(0);\n                      setPost(null);\n                    }}\n                  >\n                    Close\n                  </button>\n                )\n                : (\n                  <button\n                    type=\"button\"\n                    className=\"PostsList__button button is-primary\"\n                    onClick={() => {\n                      setSelectedPostId(post.id);\n                      setPost(post);\n                    }}\n                  >\n                    Open\n                  </button>\n                )}\n            </li>\n          )))}\n        </ul>\n      </div>\n    );\n  };\n","import { BASE_URL } from './api';\n\nexport function getPostComments(postId: number): Promise<Comment[]> {\n  return fetch(`${BASE_URL}/comments?postId=${postId}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Something went wrong.');\n      } else {\n        return response.json();\n      }\n    });\n}\n\nexport async function createPostComments(comment: NewComment) {\n  const response = await fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    body: JSON.stringify(comment),\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n  });\n\n  const res = await response.json();\n\n  return res;\n}\n\nexport async function deletePostComments(id: number) {\n  return fetch(`${BASE_URL}/comments/${id}`, {\n    method: 'DELETE',\n  });\n}\n","import React, { useState } from 'react';\nimport { createPostComments } from '../../api/comments';\nimport './NewCommentForm.scss';\n\ninterface Props {\n  postId: number;\n  getComments: (id: number) => Promise<void>;\n}\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  getComments,\n}) => {\n  const [commentName, setCommentName] = useState('');\n  const [commentEmail, setCommentEmail] = useState('');\n  const [commentBody, setCommentBody] = useState('');\n\n  const createComments = async (comment: NewComment) => {\n    await createPostComments(comment);\n  };\n\n  const onSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const newComment = {\n      name: commentName,\n      email: commentEmail,\n      body: commentBody,\n      postId,\n    };\n\n    await createComments(newComment);\n    await getComments(postId);\n\n    setCommentName('');\n    setCommentEmail('');\n    setCommentBody('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(event) => {\n        onSubmit(event);\n      }}\n    >\n      <div className=\"form-field\">\n        <input\n          name=\"name\"\n          type=\"text\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={commentName}\n          onChange={event => {\n            setCommentName(event.target.value);\n          }}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          name=\"email\"\n          type=\"text\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={commentEmail}\n          onChange={event => {\n            setCommentEmail(event.target.value);\n          }}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={commentBody}\n          onChange={event => {\n            setCommentBody(event.target.value);\n          }}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { deletePostComments, getPostComments } from '../../api/comments';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ninterface Props {\n  post: Post;\n}\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const [comments, setComments] = useState<Comment[] | null>(null);\n  const [hideComments, setHideComments] = useState(false);\n\n  const deleteComment = async (id: number) => {\n    await deletePostComments(id);\n  };\n\n  const getComments = async (postId: number) => {\n    try {\n      const commentsFromS = await getPostComments(postId);\n\n      setComments(commentsFromS);\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.log(error, 'Request failed');\n    }\n  };\n\n  const updateComments = async (id: number, postId: number) => {\n    await deleteComment(id);\n    await getComments(postId);\n  };\n\n  useEffect(() => {\n    getComments(post.id);\n  }, [post]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n\n        <button\n          type=\"button\"\n          className=\"button button--pb\"\n          onClick={() => {\n            if (comments?.length !== 0) {\n              setHideComments(!hideComments);\n            }\n          }}\n        >\n          {`${hideComments ? 'Show' : 'Hide'} ${comments?.length} comments`}\n        </button>\n\n        {!hideComments && (\n          <ul\n            className=\"PostDetails__list\"\n            data-cy=\"postDetails\"\n          >\n            {comments?.map(comment => (\n              <li\n                className=\"PostDetails__list-item\"\n                key={comment.id}\n              >\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => {\n                    updateComments(comment.id, post.id);\n                  }}\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={post.id}\n            getComments={getComments}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getAllUsers } from './api/api';\n\nconst App: React.FC = () => {\n  const [getUserId, setGetUserId] = useState<number>(0);\n  const [selectedPostId, setSelectedPostId] = useState<number>(0);\n  const [post, setPost] = useState<Post | null>(null);\n  const [users, setUsers] = useState<User[]>([]);\n\n  useEffect(() => {\n    const allUsers = async () => {\n      const usersFromServer = await getAllUsers();\n\n      setUsers(usersFromServer.slice(0, 10));\n    };\n\n    allUsers();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={getUserId}\n            onChange={event => {\n              setGetUserId(+event.target.value);\n            }}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option value={user.id} key={user.id}>{user.name}</option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            getUserId={getUserId}\n            selectedPostId={selectedPostId}\n            setSelectedPostId={setSelectedPostId}\n            setPost={setPost}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {post && <PostDetails post={post} />}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}